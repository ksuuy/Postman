
// 1. Отправить запрос.
// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
// 3. Проверить, что в body приходит правильный string.
pm.test("Body_string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!ss");
});



// 1. Отправить запрос.
// 2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
// 3. Спарсить response body в json.
    var resp = pm.response.json();

// 4. Проверить, что name в ответе равно name s request (name вбить руками.)
pm.test("Check user_name", function () {
    pm.expect(resp.name).to.eql("Ksuy");
});
// 5. Проверить, что age в ответе равно age s request (age вбить руками.)
pm.test("Check user_age", function () {
    pm.expect(resp.age).to.eql('20');
});
// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test("Check user_salary", function () {
    pm.expect(resp.salary).to.eql(1000);
});
// 7. Спарсить request.
var req = request.data
// 8. Проверить, что name в ответе равно name s request (name забрать из request.)

pm.test("Check resp_name", function () {
    pm.expect(resp.name).to.eql(req.name);
});
// 9. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Check resp_age", function () {
    pm.expect(resp.age).to.eql(req.age);
});

// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Check resp_salary", function () {
    pm.expect(resp.salary).to.eql(1000);
});

// 11. Вывести в консоль параметр family из response.
console.log (resp.family)
// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request
pm.test("Check u_salary_1_5_year", function () {
    pm.expect(resp.u_salary_1_5_year).to.eql(req.u_salary_1_5_year);
});



// 1. Отправить запрос.
// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
// 3. Спарсить response body в json.
    var resp = pm.response.json();

// 4. Спарсить request.
    var req = request.data

// 5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Check user_name", function () {
    pm.expect(resp.name).to.eql('Ksuy');
});
// 6. Проверить, что age в ответе равно age из request (age забрать из request.)
pm.test("Check user_age", function () {
    pm.expect(resp.age).to.eql('20');
});
// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Check user_salary", function () {
    pm.expect(resp.salary).to.eql(1000);
});
// 8. Вывести в консоль параметр family из response.
    var resp_family = resp.family;

console.log ("Resp_family = ",resp.family)
// 9. Проверить, что у параметра dog есть параметры name.
pm.test("Check dog has name", function () {
    pm.expect(resp.family.pets.dog.name).to.exist;
});
// 10. Проверить, что у параметра dog есть параметры age.
pm.test("Check dog has age", function () {
    pm.expect(resp.family.pets.dog.age).to.exist;
});
// 11. Проверить, что параметр name имеет значение Luky.
pm.test("Check dog has name Luky", function () {
    pm.expect(resp.family.pets.dog.name).to.eql('Luky');
});
// 12. Проверить, что параметр age имеет значение 4.
pm.test("Check age has 4 ", function () {
    pm.expect(resp.family.pets.dog.age).to.eql(4);
});

// 1. Отправить запрос.
// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
// 3. Спарсить response body в json.
// 4. Спарсить request.

let resp = pm.response.json();
let resp_name = resp.name

var req_name = pm.request.url.query.toObject().name;

// 5. Проверить, что name в ответе равно name s request (name забрать из request.)

   console.log("Resp_name = ", resp_name)
    console.log("Req_name = ", req_name)

pm.test("Check_user_name", function () {
    pm.expect(resp_name).to.eql(req_name);
});

// 6. Проверить, что age в ответе равно age из request (age забрать из request.)
let resp_age = resp.age

var req_age = pm.request.url.query.toObject().age;

pm.test("Check_user_age", function () {
    pm.expect('' + resp_age).to.eql(req_age);
});
// 7. Вывести в консоль параметр salary из request.

var salary = pm.request.url.query.toObject().salary;

console.log("req_salary = ", salary);

// 8. Вывести в консоль параметр salary из response.
let resp_salary = resp.salary

console.log("resp_salary = ", resp.salary);
// 9. Вывести в консоль 0-й элемент параметра salary из response.
console.log(resp.salary[0]);
// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log(resp.salary[1]);
// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log(resp.salary[2]);
// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)

var req_salary = pm.request.url.query.toObject().salary;

pm.test("Check salary,0", function () {
    pm.expect(''+(resp.salary[0])).to.eql(req_salary);
});
// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("Check salary_1", function () {
    pm.expect(+(resp.salary[1])).to.eql(req_salary *2);
});
// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("Check salary_2", function () {
    pm.expect(+(resp.salary[2])).to.eql(req_salary *3);
});
// 15. Создать в окружении переменную name
pm.environment.set("name");
// 16. Создать в окружении переменную age
pm.environment.set("age");
// 17. Создать в окружении переменную salary
pm.environment.set("salary");
// 18. Передать в окружение переменную name
pm.environment.set("name", "Ksuy");
// 19. Передать в окружение переменную age
pm.environment.set("age", 20);
// 20. Передать в окружение переменную salary
pm.environment.set("salary", 1000);
// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
console.log(resp.salary.join(", "));
// Пояснення 21:
// У нас є список чисел, який називається "salary".
// Ми хочемо вивести ці числа на екран, але не по одному, а разом у вигляді одного рядка.
// Тому ми використовуємо спеціальну команду console.log(), яка допомагає виводити різні речі на екран.
// У нашому випадку, ми беремо список чисел "salary" і з'єднуємо їх разом у вигляді одного рядка.
// Кожне число в рядку розділяється комою та пробілом, щоб було зрозуміло, де закінчується одне число і починається наступне.
// Коли ми маємо весь рядок готовий, ми використовуємо console.log(), щоб вивести його на екран.

// http://162.55.220.72:5005/user_info_2
// 1. Вставить параметр salary из окружения в request
pm.environment.set("salary", 4200.0);
// 2. Вставить параметр age из окружения в age
pm.environment.set("age", 20);
// 3. Вставить параметр name из окружения в name
pm.environment.set("name", "Ksuy");
// 4. Отправить запрос.
// 5. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
// 6. Спарсить response body в json.
    var resp = pm.response.json()

// 7. Спарсить request.
    var req = request.data
// 8. Проверить, что json response имеет параметр start_qa_salary
pm.test("Check_json_resp_1", function () {
    pm.expect(resp.start_qa_salary).to.exist;
});
// 9. Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("Check_json_resp_2", function () {
    pm.expect(resp.qa_salary_after_6_months).to.exist;
});

// 10. Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("Check_json_resp_3", function () {
    pm.expect(resp.qa_salary_after_12_months).to.exist;
});
// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("Check_json_resp_4", function () {
    pm.expect(resp['qa_salary_after_1.5_year']).to.exist;
});
// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years

pm.test("Check_json_resp_5", function () {
    pm.expect(resp['qa_salary_after_3.5_years']).to.exist;
});
// 13. Проверить, что json response имеет параметр person
pm.test("Check_json_resp_6", function () {
    pm.expect(resp.person).to.exist;
});
// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)

var req_salary = req.salary
var salary_start = resp.start_qa_salary;
pm.test("Check_start_qa_salary", function () {
    pm.expect(''+ resp.start_qa_salary).to.eql(req.salary);
});

// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
    var req = request.data
    var salary_6 = req.salary*2

pm.test("Check_start_qa_salary_6", function () {
    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2);
});

// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)

    var req = request.data
    var salary_12 = req.salary*2.7

pm.test("Check_start_qa_salary_12", function () {
    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.7);
});
// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
    var req = request.data
    var salary_1_5 = req.salary*3.3

pm.test("Check_start_qa_salary_1_5", function () {
    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(req.salary*3.3);
});
// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
    var req = request.data
    var salary_3_5 = req.salary*3.8

pm.test("Check_start_qa_salary_3_5", function () {
    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(req.salary*3.8);
});
// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
    var req = request.data
    var salary1 = req.salary

pm.test("Check_person", function () {
    pm.expect(''+(resp.person.u_name[1])).to.eql(req.salary);
});
// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
    var req = request.data
    var age = req.age

pm.test("Check_age", function () {
    pm.expect(''+(resp.person.u_age)).to.eql(req.age);
});
// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
    var req = request.data
    var salary_5 = req.salary*4.2

pm.test("Check_start_qa_salary_5", function () {
    pm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2);
});

// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.


var person = resp.person;
console.log("Resp_person = ", person)

let i = 0;
while (i < person.length) {
    console.log(resp_salary[i])
    i++
