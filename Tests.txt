{
	"info": {
		"_postman_id": "2ae04f97-007c-44b0-be9b-aec5e239de92",
		"name": "Postman HW_2 Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25290382",
		"_collection_link": "https://cloudy-flare-371926.postman.co/workspace/Team-Workspace~1669d995-883d-461d-80a2-2f319ffd924f/collection/25290382-2ae04f97-007c-44b0-be9b-aec5e239de92?action=share&creator=25290382&source=collection_link"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body_string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"    var resp = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check user_name\", function () {\r",
							"    pm.expect(resp.name).to.eql(\"Ksuy\");\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check user_age\", function () {\r",
							"    pm.expect(resp.age).to.eql('20');\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check user_salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(1000);\r",
							"});\r",
							"// 7. Спарсить request.\r",
							"var req = request.data\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Check resp_name\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check resp_age\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check resp_salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log (resp.family)\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request\r",
							"pm.test(\"Check u_salary_1_5_year\", function () {\r",
							"    pm.expect(resp.u_salary_1_5_year).to.eql(req.u_salary_1_5_year);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ksuy",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ksuy",
							"disabled": true
						},
						{
							"key": "age",
							"value": "20",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"    var resp = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"    var req = request.data\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check user_name\", function () {\r",
							"    pm.expect(resp.name).to.eql('Ksuy');\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check user_age\", function () {\r",
							"    pm.expect(resp.age).to.eql('20');\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check user_salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(1000);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"    var resp_family = resp.family;\r",
							"\r",
							"console.log (\"Resp_family = \",resp.family)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check dog has name\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.exist;\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check dog has age\", function () {\r",
							"    pm.expect(resp.family.pets.dog.age).to.exist;\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check dog has name Luky\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check age has 4 \", function () {\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ksuy",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Ksuy&age=20&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ksuy"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ep_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let resp_name = resp.name\r",
							"\r",
							"var req_name = pm.request.url.query.toObject().name;\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"   console.log(\"Resp_name = \", resp_name)\r",
							"    console.log(\"Req_name = \", req_name)\r",
							"\r",
							"pm.test(\"Check_user_name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let resp_age = resp.age\r",
							"\r",
							"var req_age = pm.request.url.query.toObject().age;\r",
							"\r",
							"pm.test(\"Check_user_age\", function () {\r",
							"    pm.expect('' + resp_age).to.eql(req_age);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"var salary = pm.request.url.query.toObject().salary;\r",
							"\r",
							"console.log(\"req_salary = \", salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let resp_salary = resp.salary\r",
							"\r",
							"console.log(\"resp_salary = \", resp.salary);\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp.salary[0]);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[2]);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"var req_salary = pm.request.url.query.toObject().salary;\r",
							"\r",
							"pm.test(\"Check salary,0\", function () {\r",
							"    pm.expect(''+(resp.salary[0])).to.eql(req_salary);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary_1\", function () {\r",
							"    pm.expect(+(resp.salary[1])).to.eql(req_salary *2);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary_2\", function () {\r",
							"    pm.expect(+(resp.salary[2])).to.eql(req_salary *3);\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\");\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\");\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\");\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Ksuy\");\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", 20);\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", 1000);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"console.log(resp.salary.join(\", \"));\r",
							"// Пояснення 21:\r",
							"// У нас є список чисел, який називається \"salary\".\r",
							"// Ми хочемо вивести ці числа на екран, але не по одному, а разом у вигляді одного рядка.\r",
							"// Тому ми використовуємо спеціальну команду console.log(), яка допомагає виводити різні речі на екран.\r",
							"// У нашому випадку, ми беремо список чисел \"salary\" і з'єднуємо їх разом у вигляді одного рядка.\r",
							"// Кожне число в рядку розділяється комою та пробілом, щоб було зрозуміло, де закінчується одне число і починається наступне.\r",
							"// Коли ми маємо весь рядок готовий, ми використовуємо console.log(), щоб вивести його на екран."
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ksuy",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "20",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Ksuy&age=20&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ksuy"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ep_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"pm.environment.set(\"salary\", 4200.0);\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"pm.environment.set(\"age\", 20);\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"pm.environment.set(\"name\", \"Ksuy\");\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"    var resp = pm.response.json()\r",
							"\r",
							"// 7. Спарсить request.\r",
							"    var req = request.data\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check_json_resp_1\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.exist;\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check_json_resp_2\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.exist;\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check_json_resp_3\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.exist;\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check_json_resp_4\", function () {\r",
							"    pm.expect(resp['qa_salary_after_1.5_year']).to.exist;\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"Check_json_resp_5\", function () {\r",
							"    pm.expect(resp['qa_salary_after_3.5_years']).to.exist;\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check_json_resp_6\", function () {\r",
							"    pm.expect(resp.person).to.exist;\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"var req_salary = req.salary\r",
							"var salary_start = resp.start_qa_salary;\r",
							"pm.test(\"Check_start_qa_salary\", function () {\r",
							"    pm.expect(''+ resp.start_qa_salary).to.eql(req.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"    var req = request.data\r",
							"    var salary_6 = req.salary*2\r",
							"\r",
							"pm.test(\"Check_start_qa_salary_6\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"    var req = request.data\r",
							"    var salary_12 = req.salary*2.7\r",
							"\r",
							"pm.test(\"Check_start_qa_salary_12\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.7);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"    var req = request.data\r",
							"    var salary_1_5 = req.salary*3.3\r",
							"\r",
							"pm.test(\"Check_start_qa_salary_1_5\", function () {\r",
							"    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(req.salary*3.3);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"    var req = request.data\r",
							"    var salary_3_5 = req.salary*3.8\r",
							"\r",
							"pm.test(\"Check_start_qa_salary_3_5\", function () {\r",
							"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(req.salary*3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"    var req = request.data\r",
							"    var salary1 = req.salary\r",
							"\r",
							"pm.test(\"Check_person\", function () {\r",
							"    pm.expect(''+(resp.person.u_name[1])).to.eql(req.salary);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"    var req = request.data\r",
							"    var age = req.age\r",
							"\r",
							"pm.test(\"Check_age\", function () {\r",
							"    pm.expect(''+(resp.person.u_age)).to.eql(req.age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"    var req = request.data\r",
							"    var salary_5 = req.salary*4.2\r",
							"\r",
							"pm.test(\"Check_start_qa_salary_5\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"\r",
							"var person = resp.person;\r",
							"console.log(\"Resp_person = \", person)\r",
							"\r",
							"let i = 0;\r",
							"while (i < person.length) {\r",
							"    console.log(resp_salary[i])\r",
							"    i++\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ksuy",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Ksuy",
							"disabled": true
						},
						{
							"key": "age",
							"value": "20",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
